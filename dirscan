#!/usr/bin/env python3


import argparse
from os import path
from sys import argv
import requests


def usage():
    print('''
Usage: 
python3 dirscan -u <URLs>
python3 dirscan -u <URLs> -l <directories list>

Options:
    -h, --help              Show this help message and exit
    -u, --url       		URLs
    -l, --list             	Path to file with directories lists

Examples:
python3 dirscan -u google.com
python3 dirscan -u google.com github.com
python3 dirscan -u google.com 192.168.1.9 -l /home/user/Desktop/common_dir.txt
    ''')
    exit()


def get_args():
    arg_parser = argparse.ArgumentParser(add_help=False, usage="python3 dirscan -u <URLs> -l <directories list>")
    
    arg_parser.add_argument("-h", "--help", action="store_true")
    arg_parser.add_argument("-u", "--url", nargs="+", dest="urls")
    arg_parser.add_argument("-l", "--list", dest="list_file")
    
    return arg_parser


def scan(urls, list):
	for url in urls:
		print(f"\nScanning {url}")
		for line in list:
			base_url = f"{url}/{line.strip()}"
			if request(base_url):
				print(f"Discovered directory: {base_url}")
	
	list.close()


def request(url):
	try:
		return requests.get(f"http://{url}")
	except requests.exceptions.ConnectionError:
		pass


arguments = get_args().parse_args()
list_file = None

if len(argv) == 1 or arguments.help:
    usage() # Print usage if no options provided or -h/--help provided
elif not arguments.urls:
    get_args().error("No URLs provided.\nTry 'dirscan -h' for more info.")
elif not arguments.list_file:
	list_file = open("common_dirs.txt", 'r') # open default list file as readable
elif arguments.list_file:
	if path.isfile(arguments.list_file):
		list_file = open(arguments.list_file, 'r') # open file as readable
	else:
		print("\nNot a valid file.\nExiting script ...")
		exit(1)

scan(arguments.urls, list_file)